name: vendormate/payment_api_-_develop
on:
  workflow_dispatch:
env:
  amiFileName: payment_east_ami
  amiRegion: us-east-1
  application: payment
  awsRegion: us-east-1
  baseami: ami-0f1149fe249e017a9
  component: payment
  deployName: payment
  gbucket: ghx-deployment
  modules: payment
  owner: credentialing-apps@ghx.com
  product: vision
  service: vm-gss-elasticbamboo
  subnetId: subnet-1d9ec235
  version: 1.2.0
  vmbucket: vendormate
jobs:
  Build-Payment-Build:
    runs-on: ubuntu-latest
    steps:
    - run: rm -rf ${{ github.workspace }}/*
    - uses: actions/checkout@v4.1.0

    - name: Extract Maven Version
      id: extract_version
      run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Extracted Maven version: $version"
          echo "::set-output name=version::$version"

    - name: Remove Snapshot from Version
      id: remove_snapshot
      run: |
          version=${{ steps.extract_version.outputs.version }}
          clean_version=${version/-SNAPSHOT/}
          echo "Clean version: $clean_version"
          echo "::set-output name=clean_version::$clean_version"

    - name: Use extracted version
      run: |
          clean_version=${{ steps.remove_snapshot.outputs.clean_version }}
          echo "Using extracted version: $clean_version"

    - run: |-
        echo "present working directory check"
        pwd
        ls -lrt
       # ls -lrt mavenconfig

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Upload Maven artifacts
      uses: actions/upload-artifact@v2
      with:
          name: maven-artifacts
          path: target

    
   
    - run: |-
        branchname=${{ env.planRepository_branchName }}
        version=${{ env.version }}
        mkdir payment
        mv target/*.jar "payment/payment-${{ env.version }}-${{ github.run_id }}-$branchname".jar
        tar -czvf "payment-${{ env.version }}-${{ github.run_id }}-$branchname".tar.gz payment

    - run: |-
        mkdir cf-deploy/
        mkdir cf-deploy/scripts/
        mkdir cf-deploy/templates/
    


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
   

    - name: Upload JAR to S3
      run: |
          aws s3 cp $GITHUB_WORKSPACE/target/mb2g-spring-boot-0.0.1-SNAPSHOT.jar.original  s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.vmbucket }}/${{ env.product }}/${{ env.application }}/${{ env.version }}/${{ github.ref_name }}/${{ github.run_id }}/

     
    - run: |-
        mkdir cf-deploy/
        mkdir cf-deploy/scripts/
        mkdir cf-deploy/templates/


  Build-AMI-Payment-AMI:
    runs-on:
      - self-hosted
      - Linux
    needs:
    - Build-Payment-Build
    steps:
    - uses: actions/checkout@v4.1.0
      env:
        REPO_NAME: "**org/name**"
      with:
        repository: "${{ env.REPO_NAME }}"
    - run: "/opt/packer build \\\n  --var \"bamboo_buildnumber=${{ github.run_id }}\" \\\n  --var \"bamboo_version=${{ env.version }}\" \\\n  --var \"component=${{ env.component }}\" \\\n  --var \"bamboo_branch=${{ env.planRepository_branchName }}\" \\\n  --var \"base_ami=${{ env.baseami }}\" \\\n  --var \"aws_region=${{ env.amiRegion }}\" \\\n  --var \"product=${{ env.product }}\" \\\n  --var \"gbucket=${{ env.gbucket }}\" \\\n  --var \"vmbucket=${{ env.vmbucket }}\" \\\n  --var \"modules=${{ env.modules }}\" \\\n  --var \"vpc_id=${{ env.vpcId }}\" \\\n  --var \"subnet_id=${{ env.subnetId }}\" \\\n  --var \"owner=${{ env.owner }}\" \\\n  --var \"service=${{ env.service }}\" \\\n  --var \"ami_file_name=${{ env.amiFileName }}\" \\\n  vendormate-standalone-ami.json 2>&1 | tee packeroutput\nbuildnumber=${{ github.run_id }}\ntimestamp=${{ env.buildTimeStamp }}\nbranch=${{ env.planRepository_branchName }}\nrepository=${{ env.repository_name }}\nchangeLog=\"na\"\nversion=\"${{ env.version }}\"\nproductComponent=\"${{ env.product }}-${{ env.component }}\"\nproduct=\"${{ env.product }}\"\ncomponent=\"${{ env.component }}\"\ngbucket=\"${{ env.gbucket }}\"\nvmbucket=\"${{ env.vmbucket }}\"\nmodules=\"${{ env.modules }}\"\nvpc_id=\"${{ env.vpcId }}\"\nsubnet_id=\"${{ env.subnetId }}\"\nowner=\"${{ env.owner }}\"\nservice=\"${{ env.service }}\"\nami_file_name=\"${{ env.amiFileName }}\"\nvmdevtestAccountId=\"${{ env.vmdevtestAccountId }}\"\n( grep ami- packeroutput | grep -v amazon-ebs ) | \\\nwhile read line ; do\n  region=`echo $line | awk -F':' '{ print $1 }'`\n  AMI=`echo $line | awk '{ print $2 }'`\n  echo $AMI > $ami_file_name.txt\n    \n  aws dynamodb put-item \\\n    --table-name AMIREGISTRY \\\n    --item \"{\n        \\\"amiId\\\": {\\\"S\\\": \\\"$AMI\\\"},\n        \\\"buildNumber\\\": {\\\"S\\\": \\\"$buildnumber\\\"},\n        \\\"creationDate\\\": {\\\"S\\\": \\\"$timestamp\\\"},\n        \\\"branch\\\": {\\\"S\\\": \\\"$branch\\\"},\n        \\\"repository\\\": {\\\"S\\\": \\\"$repository\\\"},\n        \\\"changeLog\\\": {\\\"S\\\": \\\"$changeLog\\\"},\n        \\\"region\\\": {\\\"S\\\": \\\"$region\\\"},\n        \\\"version\\\": {\\\"S\\\": \\\"$version\\\"},\n        \\\"ComponentRegion\\\": {\\\"S\\\": \\\"$product-$component-$region\\\"},\n        \\\"product\\\": {\\\"S\\\": \\\"$product\\\"},\n        \\\"gbucket\\\": {\\\"S\\\": \\\"$gbucket\\\"},\n        \\\"vmbucket\\\": {\\\"S\\\": \\\"$vmbucket\\\"},\n        \\\"modules\\\": {\\\"S\\\": \\\"$modules\\\"},\n        \\\"vpc_id\\\": {\\\"S\\\": \\\"$vpc_id\\\"},\n        \\\"subnet_id\\\": {\\\"S\\\": \\\"$subnet_id\\\"},\n        \\\"owner\\\": {\\\"S\\\": \\\"$owner\\\"},\n        \\\"service\\\": {\\\"S\\\": \\\"$service\\\"},\n        \\\"component\\\": {\\\"S\\\": \\\"$component\\\"}}\" \\\n    --return-consumed-capacity TOTAL\n    aws ec2 modify-image-attribute --region=$region --image-id $AMI --launch-permission \"{\\\"Add\\\":[{\\\"UserId\\\":\\\"$vmdevtestAccountId\\\"}]}\"\ndone"
      working-directory: ami-automation
      env:
        AWS_DEFAULT_REGION: us-east-1
    - run: |-
        result=`grep "Some builds didn't complete successfully and had errors" packeroutput`
        echo "${result}"
        if [ -n "${result}" ]; then
            echo "Packer Job did not complete successfully after two tries. Erroring out the Bamboo Build. Please investigate and correct any errors"
            exit 1
        else
            echo "Packer finished successfully!"
        fi
      working-directory: ami-automation
#     # This item has no matching transformer
#     - any-task/plugin-key/com.atlassian.bamboo.plugins.variable.updater.variable-updater-generic:variable-file-reader:
#         any-task:
#           plugin-key: com.atlassian.bamboo.plugins.variable.updater.variable-updater-generic:variable-file-reader
#           configuration:
#             filename: ami-automation/${{ env.amiFileName }}.txt
#             variable: "${{ env.amiFileName }}"
#             variableScope: RESULT
#           description: Set configuration East AMI ID
